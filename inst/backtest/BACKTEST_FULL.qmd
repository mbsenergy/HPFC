---
title: "Greece - 2023 & 2024:"
subtitle: v1 to v2
author: MBS Energy
date: last-modified
brand: _brand.yml
format: 
  mbs_report-html: 
      primary-color: "#4299e1" 
      title-block-banner: "#020817" 
      is-particlejs-enabled: true
      toc: true
      toc-depth: 3
      toc-title: 'NEW MODEL'
      number-sections: true
      number-depth: 3
      smooth-scroll: true
      anchor-sections: true
      self-contained: true
      embed-resources: true
      highlight-style: github
      fig-height: 3
      code-fold: show
theme: 
  light: [light.scss]
  dark: [dark.scss]  
---


```{r setup, include=FALSE}
box::use(data.table[...],
         reactable[...],
         echarts4r[...],
         magrittr[...])

knitr::opts_chunk$set(
               echo=FALSE,
	           cache=FALSE,
               prompt=FALSE,
               # tidy=TRUE,
               tidy=FALSE,
               comment=NA,
               message=FALSE,
               warning=FALSE)

options(scipen=999)
remove_outliers = function(x) {
    q1 = quantile(x, 0.25, na.rm = TRUE)  
    q3 = quantile(x, 0.75, na.rm = TRUE)  
    iqr_value = q3 - q1                   
    lower_bound = q1 - 1.5 * iqr_value
    upper_bound = q3 + 1.5 * iqr_value
    x >= lower_bound & x <= upper_bound  # Return logical vector
}

country = 'Greece'
pathss = file.path('inst', 'backtest')
pathss = file.path(getwd())

e_common(font_family = "Inter", theme = "westeros")

dt_pwr_fwd = readRDS(file = file.path(pathss, paste0(country, '-12-forecast.rds')))
RICs = unique(dt_pwr_fwd$RIC)
dt_pwr_fwd[, type := 'FOR']
dt_pwr_fwd[, test := 'V2']
dt_pwr_fwd_1 = dt_pwr_fwd[, .(date, hour, RIC, value = final_forecast, type, test)]

dt_pwr_fwd = readRDS(file = file.path(pathss, paste0(country, '-12-forecast-23.rds')))
dt_pwr_fwd[, type := 'FOR']
dt_pwr_fwd[, test := 'V2']
dt_pwr_fwd_2 = dt_pwr_fwd[, .(date, hour, RIC, value = final_forecast, type, test)]

dt_pwr_fwd = readRDS(file = file.path(pathss, paste0(country, '-20-forecast.rds')))
dt_pwr_fwd[, type := 'FOR']
dt_pwr_fwd[, test := 'V1']
dt_pwr_fwd_3 = dt_pwr_fwd[, .(date, hour, RIC, value = final_forecast, type, test)]

dt_pwr_fwd = readRDS(file = file.path(pathss, paste0(country, '-20-forecast-23.rds')))
dt_pwr_fwd[, type := 'FOR']
dt_pwr_fwd[, test := 'V1']
dt_pwr_fwd_4 = dt_pwr_fwd[, .(date, hour, RIC, value = final_forecast, type, test)]

dt_pwr_fwd = rbindlist(list(dt_pwr_fwd_1, dt_pwr_fwd_2, dt_pwr_fwd_3, dt_pwr_fwd_4))

# Spot
dt_pwr_spot = HPFC::dt_spot_pwr[RIC == RICs]
dt_pwr_spot = dt_pwr_spot[year(date) >= 2023, .(date, hour, RIC, value, type = 'OBS', test = 'OBS')]

dt_pwr = rbind(dt_pwr_spot, dt_pwr_fwd)
dt_pwr[, month := format(date, "%Y-%m-01")]

dt_pwr[, season := fcase(
    month(date) %in% c(1, 2, 3), "Winter",
    month(date) %in% c(4, 5, 6), "Spring",
    month(date) %in% c(7, 8, 9), "Summer",
    month(date) %in% c(10, 11, 12), "Fall"
)]
dt_pwr[, wday := wday(date)]

setorder(dt_pwr, -type, test, date)

dt_pwr_error = dt_pwr[, .(date, hour, test, month, season, wday, value, RIC)] %>%
    dcast(date + hour + month + season + wday + RIC ~ test)

dt_pwr_error[, peak := fifelse(hour >= 9 & hour < 21, 'ON', 'OFF')]

dt_pwr_error[, ERROR_V1 := OBS - V1]
dt_pwr_error[, ERROR_V2 := OBS - V2]
dt_pwr_error[, DIR_V1 := fifelse(ERROR_V1 >= 0, 'POS', 'NEG')]
dt_pwr_error[, DIR_V2 := fifelse(ERROR_V2 >= 0, 'POS', 'NEG')]

```

## Overview

### Forecast

```{r, overview}
#| column: screen-inset-right
dt_pwr[, .(value = round(mean(value))), by = .(date, test)] %>% 
  group_by(test) %>% 
  e_charts(date) %>% 
  e_line(value, smooth = TRUE, symbol='none') %>% 
  e_legend(show = TRUE, orient = 'horizontal') %>% 
  e_title("Mean Monthly Curve", 'Whole period ') %>% 
  e_tooltip(trigger = "axis") %>% 
  e_toolbox_feature(feature = "saveAsImage", title = "Save as image") %>% 
  e_datazoom(start = 0) 

```


### Datapoints distribution

```{r, data-dist}
#| column: screen-inset-right
dt_pwr %>% 
  group_by(test) %>% 
  e_charts() %>% 
  e_density(value, areaStyle = list(opacity = .4), smooth = TRUE, y_index = 1, symbol='none') %>%  
  e_legend(show = TRUE, orient = 'horizontal') %>% 
  e_tooltip(trigger = "axis") %>% 
  e_toolbox_feature(feature = "saveAsImage", title = "Save as image") %>% 
  e_datazoom(start = 0) 
```

## Curve Shape

### Weekly
```{r, weekly-year-2}
#| column: screen-inset-right
dts = dt_pwr[, .(value = round(mean(value))), by = .(wday, test)] 
dts %>% 
  group_by(test) %>% 
  e_charts(wday) %>% 
  e_line(value, smooth = TRUE) %>% 
  e_legend(show = TRUE, orient = 'horizontal') %>% 
  e_title("Mean Weekly Curve") %>% 
  e_tooltip(trigger = "axis") %>% 
  e_toolbox_feature(feature = "saveAsImage", title = "Save as image") %>% 
  e_datazoom(start = 0) 
```

```{r, weekly-year-2-margin}
#| fig-cap: "Curves Pseudo-Gini"

dts_w = dcast(dts, wday ~ test)
dts_w = dts_w[, .(
  gini_v1 = sum(V1 - OBS) /.N,
  gini_abs_v1 = sum(abs(V1 - OBS)) /.N,
  gini_v2 = sum(V2 - OBS) /.N,
  gini_abs_v2 = sum(abs(V2 - OBS)) /.N
)]
knitr::kable(
  dts_w
)
```

### Daily

```{r, daily-year-2}
#| column: screen-inset-right
dts = dt_pwr[, .(value = round(mean(value))), by = .(hour, test)] 
dts %>% 
  group_by(test) %>% 
  e_charts(hour) %>% 
  e_line(value, smooth = TRUE) %>% 
  e_legend(show = TRUE, orient = 'horizontal') %>% 
  e_title("Mean Daily Curve (24h)") %>% 
  e_tooltip(trigger = "axis") %>% 
  e_toolbox_feature(feature = "saveAsImage", title = "Save as image") %>% 
  e_datazoom(start = 0) 
```
```{r, daily-year-2-margin}
#| fig-cap: "Curves Pseudo-Gini"

dts_w = dcast(dts, hour ~ test)
dts_w = dts_w[, .(
  gini_v1 = sum(V1 - OBS) /.N,
  gini_abs_v1 = sum(abs(V1 - OBS)) /.N,
  gini_v2 = sum(V2 - OBS) /.N,
  gini_abs_v2 = sum(abs(V2 - OBS)) /.N
)]
knitr::kable(
  dts_w
)
```

### Season 
::: {.panel-tabset}
#### Winter
```{r, daily-season-1}
#| column: screen-inset-right
dts = dt_pwr[season == 'Winter', .(value = round(mean(value))), by = .(hour, test)] 
dts %>% 
  group_by(test) %>% 
  e_charts(hour) %>% 
  e_line(value, smooth = TRUE) %>% 
  e_legend(show = TRUE, orient = 'horizontal') %>% 
  e_title("Mean Daily Curve (24h)") %>% 
  e_tooltip(trigger = "axis") %>% 
  e_toolbox_feature(feature = "saveAsImage", title = "Save as image") %>% 
  e_datazoom(start = 0) 
```
```{r, daily-season-1-margin}
#| fig-cap: "Curves Pseudo-Gini"

dts_w = dcast(dts, hour ~ test)
dts_w = dts_w[, .(
  gini_v1 = sum(V1 - OBS) /.N,
  gini_abs_v1 = sum(abs(V1 - OBS)) /.N,
  gini_v2 = sum(V2 - OBS) /.N,
  gini_abs_v2 = sum(abs(V2 - OBS)) /.N
)]
knitr::kable(
  dts_w
)
```

#### Spring
```{r, daily-season-2}
#| column: screen-inset-right
dts = dt_pwr[season == 'Spring', .(value = round(mean(value))), by = .(hour, test)] 
dts %>% 
  group_by(test) %>% 
  e_charts(hour) %>% 
  e_line(value, smooth = TRUE) %>% 
  e_legend(show = TRUE, orient = 'horizontal') %>% 
  e_title("Mean Daily Curve (24h)") %>% 
  e_tooltip(trigger = "axis") %>% 
  e_toolbox_feature(feature = "saveAsImage", title = "Save as image") %>% 
  e_datazoom(start = 0) 
```

```{r, daily-season-2-margin}
#| fig-cap: "Curves Pseudo-Gini"

dts_w = dcast(dts, hour ~ test)
dts_w = dts_w[, .(
  gini_v1 = sum(V1 - OBS) /.N,
  gini_abs_v1 = sum(abs(V1 - OBS)) /.N,
  gini_v2 = sum(V2 - OBS) /.N,
  gini_abs_v2 = sum(abs(V2 - OBS)) /.N
)]
knitr::kable(
  dts_w
)
```

#### Summer
```{r, daily-season-3}
#| column: screen-inset-right
dts = dt_pwr[season == 'Summer', .(value = round(mean(value))), by = .(hour, test)] 
dts %>% 
  group_by(test) %>% 
  e_charts(hour) %>% 
  e_line(value, smooth = TRUE) %>% 
  e_legend(show = TRUE, orient = 'horizontal') %>% 
  e_title("Mean Daily Curve (24h)") %>% 
  e_tooltip(trigger = "axis") %>% 
  e_toolbox_feature(feature = "saveAsImage", title = "Save as image") %>% 
  e_datazoom(start = 0) 
```

```{r, daily-season-3-margin}
#| fig-cap: "Curves Pseudo-Gini"

dts_w = dcast(dts, hour ~ test)
dts_w = dts_w[, .(
  gini_v1 = sum(V1 - OBS) /.N,
  gini_abs_v1 = sum(abs(V1 - OBS)) /.N,
  gini_v2 = sum(V2 - OBS) /.N,
  gini_abs_v2 = sum(abs(V2 - OBS)) /.N
)]
knitr::kable(
  dts_w
)
```

#### Fall
```{r, daily-season-4}
#| column: screen-inset-right
dts = dt_pwr[season == 'Fall', .(value = round(mean(value))), by = .(hour, test)] 
dts %>% 
  group_by(test) %>% 
  e_charts(hour) %>% 
  e_line(value, smooth = TRUE) %>% 
  e_legend(show = TRUE, orient = 'horizontal') %>% 
  e_title("Mean Daily Curve (24h)") %>% 
  e_tooltip(trigger = "axis") %>% 
  e_toolbox_feature(feature = "saveAsImage", title = "Save as image") %>% 
  e_datazoom(start = 0) 
```
```{r, daily-season-4-margin}
#| fig-cap: "Curves Pseudo-Gini"

dts_w = dcast(dts, hour ~ test)
dts_w = dts_w[, .(
  gini_v1 = sum(V1 - OBS) /.N,
  gini_abs_v1 = sum(abs(V1 - OBS)) /.N,
  gini_v2 = sum(V2 - OBS) /.N,
  gini_abs_v2 = sum(abs(V2 - OBS)) /.N
)]
knitr::kable(
  dts_w
)
```
:::


## Error Metrics

### Base metrics (with outliers removed)
```{r, base-metrics}
#| column: screen-inset-right
dt_stats = 
  dt_pwr[dt_pwr[, remove_outliers(value), by = .(season, test)]$V1][, 
         .(mean = mean(value), sd = sd(value), iqr = IQR(value)),
         by = .(test)] 
  
knitr::kable(
  dt_stats
)
```

### Error Base Metrics
```{r, error-base-metrics}
#| column: screen-inset-right
#| layout-ncol: 3

dt_pwr_error_v = melt(dt_pwr_error, measure.vars = c("ERROR_V1", "ERROR_V2"), 
                 variable.name = "test", value.name = "ERROR")

dt_pwr_error_v[, .(
  MEAN = round(mean(ERROR, na.rm = TRUE), 2),
  MEDIAN = round(median(ERROR, na.rm = TRUE), 2),
  SD = round(sd(ERROR, na.rm = TRUE), 2),
  IQR = round(IQR(ERROR, na.rm = TRUE), 2),
  Qn1 = round(quantile(ERROR, 0.25, na.rm = TRUE), 2),
  Qn3 = round(quantile(ERROR, 0.75, na.rm = TRUE), 2)
), by = .(test, season)] %>% 
  knitr::kable()

dt_pwr_error_v[order(wday), .(
  MEAN = round(mean(ERROR, na.rm = TRUE), 2),
  MEDIAN = round(median(ERROR, na.rm = TRUE), 2),
  SD = round(sd(ERROR, na.rm = TRUE), 2),
  IQR = round(IQR(ERROR, na.rm = TRUE), 2),
  Qn1 = round(quantile(ERROR, 0.25, na.rm = TRUE), 2),
  Qn3 = round(quantile(ERROR, 0.75, na.rm = TRUE), 2)
), by = .(test, wday)] %>% 
  knitr::kable()

dt_pwr_error_v[, .(
  MEAN = round(mean(ERROR, na.rm = TRUE), 2),
  MEDIAN = round(median(ERROR, na.rm = TRUE), 2),
  SD = round(sd(ERROR, na.rm = TRUE), 2),
  IQR = round(IQR(ERROR, na.rm = TRUE), 2),
  Qn1 = round(quantile(ERROR, 0.25, na.rm = TRUE), 2),
  Qn3 = round(quantile(ERROR, 0.75, na.rm = TRUE), 2)
), by = .(test, peak)] %>% 
  knitr::kable()
```

### Error Bias

```{r, error-bias}
#| layout-ncol: 2
dt_pwr_error_vb = melt(dt_pwr_error_v, measure.vars = c("DIR_V1", "DIR_V2"), 
                 variable.name = "direction", value.name = "ERROR_DIR")
dt_pwr_error_v[, .(
  MAE = round(mean(abs(ERROR), na.rm = TRUE), 2)
), by = .(test, season)] %>% 
  knitr::kable()

dt_pwr_error_vb[, .(
  MAE = round(mean(abs(ERROR), na.rm = TRUE), 2)
), by = .(test, season, direction)] %>% dcast(test + season ~ direction) %>% 
  knitr::kable()
```
